# 客户端设置
client:
  # 名字，可以自己起，会在日志中显示，只能由字母数字横线组成，数字不能打头
  qbittorrent-001:
    # 客户端类型
    # 支持的客户端列表：
    # qBittorrent
    # Transmission
    # 其它也许以后会加
    type: qBittorrent
    # 客户端地址
    endpoint: "http://192.168.1.89:8080"
    # 登录信息（暂不支持 Basic Auth）
    # 用户名
    username: "qbitZLQ"
    # 密码
    password: "ZHUlq-qbit-1999"
    # Basic Auth - 不知道这是什么的话，请保持默认
    basic-auth:
      user: ""
      pass: ""
    # 验证 SSL 证书有效性
    verify-ssl: true
    # Http 协议版本
    http-version: "HTTP_1_1"
# Http 服务器设置
server:
  # 监听端口
  http: 9898
  # 客户端远程 URL 设置
  # Docker 网络请改 host 模式使用或者设置容器端口暴露
  # 当客户端需要与 PBH 通信时，客户端的 URL 会被更改为 http://<address>:<http-port>/<client-api-route>
  address: "127.0.0.1"
  # 在 PBH 需要给下载器传递地址时，将使用此地址传递，请确保此地址最终可被下载器访问，请【不要】以 / 结尾
  prefix: "http://127.0.0.1:9898"
# 日志记录器配置
logger:
  # 是否隐藏 [完成] 已检查 XX 的 X 个活跃 Torrent 和 X 个对等体 的日志消息？
  # 在 DSM 的 ContainerManager 上有助于大幅度减少日志数量，并仅记录有价值的封禁等日志条目
  hide-finish-log: false
# 线程控制
threads:
  # 全局检查线程池并发等级
  # 此线程用于执行通用并发任务：如：Peers 任务提交处理，执行规则集
  # 提升此值将允许更多任务执行，但过高的值并不会带来显著收益
  general-parallelism: 6
  # 封禁检查线程池并发等级
  # 此线程池用于执行功能模块
  # 提升此值将允许更多的功能模块实例同时执行
  check-ban-parallelism: 8
  # 规则执行线程池并发等级
  # 此线程池用于执行用户定义的规则检查，如：执行主动探测的耗时规则子项
  rule-execute-parallelism: 16
  # 下载器 API 操作线程池并发等级
  # 此线程池用于调用下载器 API，如：获取 Torrents 或 Peers 列表
  # 提升此值将允许同时执行更多的 API 请求以提升速度，但可能对下载器产生压力，建议不要设置的过大，以免造成下载器进程卡住或崩溃
  downloader-api-parallelism: 8
# 数据持久化
persist:
  # 封禁日志保留天数（开发中）
  ban-logs-keep-days: 30
# BitTorrent Threat Network 威胁防护网络（测试版）
btn:
  # 启用 BTN 模块
  # 启用后，才可以使用由 BTN 提供的云规则功能
  enabled: false
  # 启用数据提交（匿名）
  # BTN 网络基于所有启用此功能的用户提交的数据，对 Peers 进行可信度验证
  # 通过启用此选项，您也会加入 BTN 网络并提交您的 Torrent 上的活动
  # 以下信息将被发送到 BTN 实例；
  # 您的 Torrent 列表（包括：Torrent 种子摘要的二次不可逆哈希和 Torrent 大小）
  # 连接到您的 Torrent 的所有 Peers （包括：IP地址、端口号、PeerID、UserAgent（ClientName），Peer协议，Peer总下载量，Peer总上传量，Peer瞬时上传速度，Peer瞬时下载速度，Peer下载进度，以及您的下载器名称）
  submit: true
  # 部分 BTN 实例可能要求您登录验证以确认您的身份或下发不同的配置文件。如果是这样的话，您需要在下面输入凭据信息
  # 如果 BTN 实例未要求您登录验证，则通常不需要填写
  app-id: "example-app-id"
  app-secret: "example-app-secret"
  # 填写实例 URL，您需要自行寻找一个 BTN 实例服务器
  config-url: "http://127.0.0.1:9988/ping/config"
# 封禁列表处理
# PBH 能够除了调用 BT 客户端的封禁 API 外，还能够进行如下操作，以便适配更多其它客户端
banlist-invoker:
  # 生成 ipfilter.dat 文件
  ipfilter-dat:
    enabled: false
  # 执行指定的系统命令
  # 所有的可用占位符都会被注册到执行的命令的进程环境变量中
  #如果您的命令没有读取环境变量的能力，则也可以使用 {%占位符名%}，这样 PBH 会在执行前替换命令中的占位符，但请注意转义问题
  # 可用占位符列表：
  #peer.ip - 对等体 IP 地址
  #peer.port - 对等体端口
  #meta.context - 封禁模块上下文
  #meta.description - 封禁描述
  #meta.banAt - 封禁时间
  #meta.unbanAt - 解封时间
  #meta.peer.id - PeerID
  #meta.peer.clientName - UserAgent 客户端名称字符串
  #meta.peer.uploaded - 总上传量
  #meta.peer.downloaded - 总下载量
  #meta.peer.progress - 客户端进度
  #meta.torrent.id - Torrent ID
  #meta.torrent.name - Torrent 名称
  #meta.torrent.hash - Torrent 的 Info Hash
  #meta.torrent.size - Torrent 大小
  command-exec:
    enabled: false
    reset:
      - "/bin/sh -c 'ipset destroy peerbanhelper-blocklist'"
      - "/bin/sh -c 'ipset create peerbanhelper-blocklist hash:ip'"
      - "/bin/sh -c 'iptables -I INPUT -m set --match-set peerbanhelper-blocklist src -j DROP'"
      - "/bin/sh -c 'iptables -A OUTPUT -m set --match-set peerbanhelper-blocklist dst -j DROP'"
    ban:
      - "/bin/sh -c 'ipset add peerbanhelper-blocklist ${peer.ip}'"
    unban:
      - "/bin/sh -c 'ipset remove peerbanhelper-blocklist ${peer.ip}'"